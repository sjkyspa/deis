#!/usr/bin/env bash

set -eo pipefail

ARGS=3

indent() {
    echo "       $@"
}

puts-step() {
    echo "-----> $@"
}

puts-step-sameline() {
    echo -n "-----> $@"
}

puts-warn() {
    echo " !     $@"
}

usage() {
    echo "Usage: $0 <user> <repo> <sha>"
}

parse-string(){
    # helper to avoid the single quote escape
    # occurred in command substitution
    local args=() idx=0 IFS=' ' c
    for c; do printf -v args[idx++] '%s ' "$c"; done
    printf "%s\n" "${args[*]}"
}

puts_red_f() {
  while read data; do
    echo $'\033[0;31m'"      $data" $'\033[0m'
  done
}

puts_green() {
  echo $'\033[0;32m'"      $@" $'\033[0m'
}

ex() {
    last_status=$?
    if [ "$last_status" != "0" ]; then
        if [ -f "process.log" ]; then
          cat process.log|puts_red_f
        fi

        if [ -n "$build_container" ]; then
          docker rm -f $build_container
        fi

        if [ -n "$verify_container" ]; then
            docker rm -f $verify_container
        fi

        exit 1;
    else
        puts_green "build success"
        exit 0;
    fi
}

trap ex HUP INT TERM QUIT ABRT EXIT


if [ $# -ne $ARGS ]; then
    usage
    exit 1
fi

USER=$1
REPO=$2
GIT_SHA=$3
SHORT_SHA=${GIT_SHA:0:8}
APP_NAME="${REPO%.*}"

cd $(dirname $0) # ensure we are in the root dir

ROOT_DIR=$(pwd)
REPO_DIR="${ROOT_DIR}/${REPO}"
BUILD_DIR="${REPO_DIR}/build"
CACHE_DIR="${REPO_DIR}/cache"

# define image names
IMAGE_NAME="$APP_NAME:git-$SHORT_SHA"
TMP_IMAGE="hub.deepi.cn/$IMAGE_NAME"

# create app directories
mkdir -p $BUILD_DIR $CACHE_DIR
# create temporary directory inside the build dir for this push
TMP_DIR=$(mktemp -d -p $BUILD_DIR)

cd $REPO_DIR
git archive $GIT_SHA | tar -xmC $TMP_DIR

# switch to app context
cd $TMP_DIR
STACK_NAME=$(cat $TMP_DIR/manifest.yml|shyaml get-value name)
build_image="hub.deepi.cn/$STACK_NAME-build"
verify_image="hub.deepi.cn/$STACK_NAME-verify"

echo
puts-step "Starting Building ..."
docker pull $build_image &> process.log
docker_host=$(ip addr show docker0|grep -Eo "inet ([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*)/.*"|awk '{print $2}'|awk -F'/' '{print $1}')
build_container=$(docker run -d -v /var/run/docker.sock:/var/run/docker.sock --privileged -v `pwd`:/tmp/repo -e APP_NAME=$APP_NAME -e STACK=$STACK -e SOLUTION=$SOLUTION -e HOST=$docker_host -e IMAGE=$TMP_IMAGE $build_image)
docker attach $build_container
puts-step "Build $APP_NAME success"
echo


echo
puts-step "Starting Verifying ..."
docker pull $verify_image &> process.log
docker_host=$(ip addr show docker0|grep -Eo "inet ([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*)/.*"|awk '{print $2}'|awk -F'/' '{print $1}')
verify_container=$(docker run -d -v /var/run/docker.sock:/var/run/docker.sock --privileged -v `pwd`:/tmp/repo -e APP_NAME=$APP_NAME -e STACK=$STACK -e SOLUTION=$SOLUTION -e HOST=$docker_host -e IMAGE=$TMP_IMAGE $verify_image)
docker attach $verify_container
puts-step "Verifying $APP_NAME success"
echo
