ext {
    group = 'com.tw'
    version = "1.0.0"
    main='com.tw.Main'
}

group ext.group
version ext.version

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.flywaydb:flyway-gradle-plugin:3.0"
        classpath 'mysql:mysql-connector-java:5.1.34'
    }
}


apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'flyway'

mainClassName = "com.tw.Main"

def environment = System.getenv()

flyway {
    driver = 'com.mysql.jdbc.Driver'
    url = environment.getOrDefault("DATABASE", 'jdbc:mysql://localhost:3306/ke_tsu?user=mysql&password=mysql') + "&allowMultiQueries=true";
}


sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    jerseyVersion = "2.22.1"
}

sourceSets {
    itest
    test {
        resources {
            srcDir 'src/itest/resources'
        }
    }
}

dependencies {
    compile "org.glassfish.jersey.core:jersey-server:$jerseyVersion"
    compile "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$jerseyVersion"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion"
    compile 'org.mybatis:mybatis:3.2.8'
    compile "redis.clients:jedis:2.6.2"
    compile "org.apache.commons:commons-lang3:3.3.2"
    compile "org.slf4j:slf4j-api:1.7.7"
    compile "org.slf4j:jcl-over-slf4j:1.7.7"
    compile "org.slf4j:slf4j-log4j12:1.7.7"
    compile "com.github.kstyrc:embedded-redis:0.6"


    runtime 'mysql:mysql-connector-java:5.1.34'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile 'org.mockito:mockito-all:1.8.4'
    testCompile "org.glassfish.jersey.test-framework:jersey-test-framework-core:$jerseyVersion"
    testCompile "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:$jerseyVersion"
}

task standaloneJar(type: Jar, dependsOn: jar) {
    baseName = "app"
    classifier = "standalone"
    version = ""

    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)

    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    exclude("META-INF/*.SF")
    exclude("META-INF/*.DSA")
    exclude("META-INF/*.RSA")
    exclude("META-INF/*.RSA")
    exclude("META-INF/*.RSA")

    manifest {
        attributes 'Main-Class': "$main"
    }
}

configurations {
    itestCompile.extendsFrom testCompile
    itestRuntime.extendsFrom testRuntime
}

task itestJar(type: Jar, dependsOn: jar) {
    baseName = "verify"
    classifier = "standalone"
    version = ""

    from files(sourceSets.itest.output.classesDir)
    from files(sourceSets.itest.output.resourcesDir)

    from configurations.itestCompile.asFileTree.files.collect { zipTree(it) }

    exclude("META-INF/*.SF")
    exclude("META-INF/*.DSA")
    exclude("META-INF/*.RSA")
    exclude("META-INF/*.RSA")
    exclude("META-INF/*.RSA")
    manifest {
        attributes 'Main-Class': 'specs.Main'
    }
}
